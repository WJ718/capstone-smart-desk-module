// Generated by view binder compiler. Do not edit!
package com.example.application.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.application.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMenuBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnCalendar;

  @NonNull
  public final EditText deviceId;

  @NonNull
  public final Button registerBtn;

  @NonNull
  public final Button studyBtn;

  @NonNull
  public final TextView tabApp;

  @NonNull
  public final TextView tabSettings;

  @NonNull
  public final LinearLayout topTabs;

  private ActivityMenuBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnCalendar,
      @NonNull EditText deviceId, @NonNull Button registerBtn, @NonNull Button studyBtn,
      @NonNull TextView tabApp, @NonNull TextView tabSettings, @NonNull LinearLayout topTabs) {
    this.rootView = rootView;
    this.btnCalendar = btnCalendar;
    this.deviceId = deviceId;
    this.registerBtn = registerBtn;
    this.studyBtn = studyBtn;
    this.tabApp = tabApp;
    this.tabSettings = tabSettings;
    this.topTabs = topTabs;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCalendar;
      Button btnCalendar = ViewBindings.findChildViewById(rootView, id);
      if (btnCalendar == null) {
        break missingId;
      }

      id = R.id.deviceId;
      EditText deviceId = ViewBindings.findChildViewById(rootView, id);
      if (deviceId == null) {
        break missingId;
      }

      id = R.id.registerBtn;
      Button registerBtn = ViewBindings.findChildViewById(rootView, id);
      if (registerBtn == null) {
        break missingId;
      }

      id = R.id.studyBtn;
      Button studyBtn = ViewBindings.findChildViewById(rootView, id);
      if (studyBtn == null) {
        break missingId;
      }

      id = R.id.tabApp;
      TextView tabApp = ViewBindings.findChildViewById(rootView, id);
      if (tabApp == null) {
        break missingId;
      }

      id = R.id.tabSettings;
      TextView tabSettings = ViewBindings.findChildViewById(rootView, id);
      if (tabSettings == null) {
        break missingId;
      }

      id = R.id.topTabs;
      LinearLayout topTabs = ViewBindings.findChildViewById(rootView, id);
      if (topTabs == null) {
        break missingId;
      }

      return new ActivityMenuBinding((ConstraintLayout) rootView, btnCalendar, deviceId,
          registerBtn, studyBtn, tabApp, tabSettings, topTabs);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
